# Alternative Dockerfile with Ubuntu base (if Alpine has issues)
# Multi-stage build for Spring Boot backend
FROM maven:3.9.4-openjdk-21-slim AS build

WORKDIR /app

# Copy pom.xml and download dependencies
COPY backend/pom.xml .
RUN mvn dependency:go-offline -B

# Copy source code and build
COPY backend/src ./src
RUN mvn clean package -DskipTests

# Production stage - Using Ubuntu-based JRE
FROM eclipse-temurin:21-jre-jammy

WORKDIR /app

# Install curl for health checks
RUN apt-get update && \
    apt-get install -y curl && \
    rm -rf /var/lib/apt/lists/*

# Create upload directories with proper permissions
RUN mkdir -p /app/uploads/avatar && \
    mkdir -p /app/uploads/blog && \
    mkdir -p /app/uploads/config && \
    chmod -R 755 /app/uploads

# Copy jar from build stage
COPY --from=build /app/target/HealApp-*.jar app.jar

# Create non-root user for security
RUN groupadd -r healapp && useradd -r -g healapp healapp
RUN chown -R healapp:healapp /app
USER healapp

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Run the application
ENTRYPOINT ["java", "-Dspring.profiles.active=prod", "-jar", "app.jar"]
